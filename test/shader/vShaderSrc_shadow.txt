#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNor;
layout(location = 2) in vec2 aTexCoord;
layout(location = 3) in vec2 aNorCoord;
layout(location = 4) in vec3 aTan;
layout(location = 5) in vec3 aBitan;

out vec2 TexCoord;
out vec2 NorCoord;
out vec4 posInLSpace;

out vec3 TangentLightPos;
out vec3 TangentViewPos;
out vec3 TangentFragPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpaceMatrix;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
   vec3 FragPos = vec3(model * vec4(aPos, 1.0f));
   TexCoord = aTexCoord;
   NorCoord = aNorCoord;

   mat3 normalMatrix = transpose(inverse(mat3(model)));
   vec3 T = normalize(normalMatrix * aTan);
   vec3 B = normalize(normalMatrix * aBitan);
   vec3 N = normalize(normalMatrix * aNor);
   
   T = normalize(T - dot(T, N) * N);
   mat3 TBN = transpose(mat3(T, B, N));
   
   TangentLightPos = TBN * lightPos;
   TangentViewPos  = TBN * viewPos;
   TangentFragPos  = TBN * FragPos;


   gl_Position = projection * view * model * vec4(aPos, 1.0f);

   posInLSpace = lightSpaceMatrix * vec4(FragPos, 1.0);
};