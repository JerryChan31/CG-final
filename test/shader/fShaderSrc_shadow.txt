#version 330 core
in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;
in vec2 NorCoord;
in vec4 posInLSpace;
out vec4 FragColor;


uniform sampler2D terrainTexture;
uniform sampler2D depthMap;
uniform sampler2D normalMap;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;



float ShadowCalculation(vec4 posInLSpace, float bias)
{

	vec3 projCoords = posInLSpace.xyz / posInLSpace.w;

	projCoords = projCoords * 0.5 + 0.5;
	
	float closestDepth = texture(depthMap, projCoords.xy).r;
	
	float currentDepth = projCoords.z;
	
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(depthMap, 0);
	for (int x = -1; x <= 1; ++x)
	{
		for (int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= 9.0;
	if (projCoords.z > 1.0)
		shadow = 0.0;
	return shadow;
}


void main()
{	
    vec3 normal = texture(normalMap, NorCoord).rgb;
    normal = normalize(normal * 2.0 - 1.0); 
	vec4 objectColor = vec4(texture(terrainTexture, TexCoord).rgb, 1.0f);
	vec3 ambient = 0.5 * lightColor ;
	vec3 norm = normalize(vec3(normal.x, -normal.y, normal.z));
	vec3 lightDir = normalize(FragPos - lightPos);
	float diffusion = max(dot(norm,-lightDir),0.0);
	vec3 diffuse = diffusion * lightColor * 0.3;
   vec3 viewDir = normalize(FragPos - viewPos);
	vec3 halfwayDir = normalize(-lightDir - viewDir);
	float spe = pow(max(dot(norm, halfwayDir), 0.0),8);
   vec3 specular = spe * lightColor * 0.3;

	float bias =0.002;
	float shadow = ShadowCalculation(posInLSpace, bias);
   FragColor = vec4((ambient + (1.0 - shadow) * (diffuse + specular)) , 1.0f) * objectColor;
};