#version 330 core
in vec3 FragPos;
in vec3 Normal;


out vec4 FragColor;

uniform vec4 objectColor;
uniform float ambientStrength;
uniform float diffuseStrength;
uniform float specularStrength;
uniform int shininess;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
void main()
{	
	vec3 ambient = ambientStrength * lightColor ;
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(FragPos - lightPos);
	float diffusion = max(dot(norm,-lightDir),0.0);
	vec3 diffuse = diffusion * lightColor * diffuseStrength;

   vec3 viewDir = normalize(FragPos - viewPos);
   vec3 reflectDir = reflect(lightDir,norm);
	float spe = pow(max(dot(-viewDir,reflectDir),0.0),shininess);
   vec3 specular = spe * lightColor * specularStrength;
   FragColor = objectColor * (vec4((ambient + diffuse + specular),1.0f));
};